{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files';\n// import remarkGfm from 'remark-gfm';\n// import rehypePrettyCode from 'rehype-pretty-code';\n// import rehypeSlug from 'rehype-slug';\n// import rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport readingTime from 'reading-time';\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n  readingTime: {\n    type: 'json',\n    resolve: (doc) => readingTime(doc.body.raw),\n  },\n  slug: {\n    type: 'string',\n    // eslint-disable-next-line no-underscore-dangle\n    resolve: (doc) => doc._raw.flattenedPath,\n  },\n  structuredData: {\n    type: 'object',\n    resolve: (doc) => ({\n      '@context': 'https://schema.org',\n      '@type': 'BlogPosting',\n      headline: doc.title,\n      datePublished: doc.publishedAt,\n      dateModified: doc.publishedAt,\n      description: doc.summary,\n      image: doc.image\n        ? `https://ezeikel.com${doc.image}`\n        : `https://ezeikel.com/api/og?title=${doc.title}`,\n      // eslint-disable-next-line no-underscore-dangle\n      url: `https://ezeikel.com/blog/${doc._raw.flattenedPath}`,\n      author: {\n        '@type': 'Person',\n        name: 'Ezeikel Pemberton',\n      },\n    }),\n  },\n};\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `**/*.mdx`,\n  // BUG: using useMDXComponent from next-contentlayer/hooks doesn't seem to work\n  // contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      required: true,\n    },\n    publishedAt: {\n      type: 'string',\n      required: true,\n    },\n    summary: {\n      type: 'string',\n      required: true,\n    },\n    image: {\n      type: 'string',\n    },\n  },\n  computedFields,\n}));\n\nexport default makeSource({\n  contentDirPath: 'posts',\n  documentTypes: [Post],\n  // mdx: {\n  //   remarkPlugins: [remarkGfm],\n  //   rehypePlugins: [\n  //     rehypeSlug,\n  //     [\n  //       rehypePrettyCode,\n  //       {\n  //         theme: 'one-dark-pro',\n  //         onVisitLine(node) {\n  //           // Prevent lines from collapsing in `display: grid` mode, and allow empty\n  //           // lines to be copy/pasted\n  //           if (node.children.length === 0) {\n  //             node.children = [{ type: 'text', value: ' ' }];\n  //           }\n  //         },\n  //         onVisitHighlightedLine(node) {\n  //           node.properties.className.push('line--highlighted');\n  //         },\n  //         onVisitHighlightedWord(node) {\n  //           node.properties.className = ['word--highlighted'];\n  //         },\n  //       },\n  //     ],\n  //     [\n  //       rehypeAutolinkHeadings,\n  //       {\n  //         properties: {\n  //           className: ['anchor'],\n  //         },\n  //       },\n  //     ],\n  //   ],\n  // },\n});\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAK/C,OAAO,iBAAiB;AAGxB,IAAM,iBAAiB;AAAA,EACrB,aAAa;AAAA,IACX,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG;AAAA,EAC5C;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA;AAAA,IAEN,SAAS,CAAC,QAAQ,IAAI,KAAK;AAAA,EAC7B;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,IACN,SAAS,CAAC,SAAS;AAAA,MACjB,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,UAAU,IAAI;AAAA,MACd,eAAe,IAAI;AAAA,MACnB,cAAc,IAAI;AAAA,MAClB,aAAa,IAAI;AAAA,MACjB,OAAO,IAAI,QACP,sBAAsB,IAAI,UAC1B,oCAAoC,IAAI;AAAA;AAAA,MAE5C,KAAK,4BAA4B,IAAI,KAAK;AAAA,MAC1C,QAAQ;AAAA,QACN,SAAS;AAAA,QACT,MAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACF;AAEO,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA;AAAA;AAAA,EAGjB,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,IACR;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCtB,CAAC;",
  "names": []
}
